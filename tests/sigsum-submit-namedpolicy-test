#! /bin/sh

set -e

./bin/sigsum-key generate -o test.log.key
./bin/sigsum-key generate -o test.agent.key

# Create pubkey with policy to be used in tests
printf 'sigsum-policy="testpolicy123" ' > tmp-policy-start
cat tmp-policy-start test.agent.key.pub > test.agent.key.withpolicy.pub

# Create pubkey with dummy policy
printf 'sigsum-policy="dummypolicy" ' > tmp-policy-start
cat tmp-policy-start test.agent.key.pub > test.agent.key.withdummypolicy.pub

# Reading private key files still supports raw hex.
printf '%064x' 1 > test.token.key

# Start sigsum log server
rm -f test.log.sth
echo "startup=empty" > test.log.sth.startup
./bin/sigsum-log-primary --key-file test.log.key \
    --interval=1s --log-level=error --backend=ephemeral --sth-file test.log.sth &

SIGSUM_PID=$!

# Start sigsum-agent
./bin/sigsum-agent --key-file test.agent.key --socket-name=/tmp/test.socket &

SIGSUM_AGENT_PID=$!

cleanup () {
    kill ${SIGSUM_PID}
    kill ${SIGSUM_AGENT_PID}
}

trap cleanup EXIT

# Give log server some time to get ready.
sleep 2

echo "log $(./bin/sigsum-key to-hex -k test.log.key.pub) http://localhost:6965" > test.policy
echo "quorum none" >> test.policy
cp test.policy /tmp/testpolicy123.sigsum-policy

x=1
    echo >&2 "submit $x -- sigsum-submit with policy name specified in pubkey"
    # Must be exactly 32 bytes
    printf "%31s\n" "foo-$x" \
	| SSH_AUTH_SOCK=/tmp/test.socket SIGSUM_POLICY_DIR=/tmp ./bin/sigsum-submit --timeout=5s \
	     --token-domain test.sigsum.org --token-signing-key test.token.key \
	     --raw-hash -o "test.$x.proof" --signing-key test.agent.key.withpolicy.pub

x=2
    echo >&2 "submit $x -- sigsum-submit with policy name specified using --Policy="
    # Must be exactly 32 bytes
    printf "%31s\n" "foo-$x" \
	| SSH_AUTH_SOCK=/tmp/test.socket SIGSUM_POLICY_DIR=/tmp ./bin/sigsum-submit --timeout=5s \
	     --token-domain test.sigsum.org --token-signing-key test.token.key \
	     --raw-hash -o "test.$x.proof" --signing-key test.agent.key.pub \
	     --Policy=testpolicy123

x=3
    echo >&2 "submit $x -- sigsum-submit with policy name specified using -P"
    # Must be exactly 32 bytes
    printf "%31s\n" "foo-$x" \
	| SSH_AUTH_SOCK=/tmp/test.socket SIGSUM_POLICY_DIR=/tmp ./bin/sigsum-submit --timeout=5s \
	     --token-domain test.sigsum.org --token-signing-key test.token.key \
	     --raw-hash -o "test.$x.proof" --signing-key test.agent.key.withpolicy.pub \
	     -P testpolicy123

x=4
    echo >&2 "submit $x -- sigsum-submit with policy name specified using -P and in pubkey (name in pubkey should then be ignored)"
    # Must be exactly 32 bytes
    printf "%31s\n" "foo-$x" \
	| SSH_AUTH_SOCK=/tmp/test.socket SIGSUM_POLICY_DIR=/tmp ./bin/sigsum-submit --timeout=5s \
	     --token-domain test.sigsum.org --token-signing-key test.token.key \
	     --raw-hash -o "test.$x.proof" --signing-key test.agent.key.withdummypolicy.pub \
	     -P testpolicy123

./bin/sigsum-key generate -o test.submit2.key
./bin/sigsum-key generate -o test.submit3.key
cat test.agent.key.pub test.submit*.key.pub > test.verify-keys.pub

for x in $(seq 4); do
    echo >&2 "verify $x"
    printf "%31s\n" "foo-$x" \
	| ./bin/sigsum-verify --raw-hash -k test.verify-keys.pub --policy test.policy "test.$x.proof"
done

# Check that the message is taken into account in validation.
if printf "%31s\n" foo-2 \
	| ./bin/sigsum-verify --key test.agent.key.pub --policy test.policy "test.1.proof" ; then
    false
else
    true
fi
