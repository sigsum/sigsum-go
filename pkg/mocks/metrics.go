// Code generated by MockGen. DO NOT EDIT.
// Source: sigsum.org/sigsum-go/pkg/server (interfaces: Metrics)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockMetrics is a mock of Metrics interface.
type MockMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsMockRecorder
}

// MockMetricsMockRecorder is the mock recorder for MockMetrics.
type MockMetricsMockRecorder struct {
	mock *MockMetrics
}

// NewMockMetrics creates a new mock instance.
func NewMockMetrics(ctrl *gomock.Controller) *MockMetrics {
	mock := &MockMetrics{ctrl: ctrl}
	mock.recorder = &MockMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetrics) EXPECT() *MockMetricsMockRecorder {
	return m.recorder
}

// OnRequest mocks base method.
func (m *MockMetrics) OnRequest(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnRequest", arg0)
}

// OnRequest indicates an expected call of OnRequest.
func (mr *MockMetricsMockRecorder) OnRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnRequest", reflect.TypeOf((*MockMetrics)(nil).OnRequest), arg0)
}

// OnResponse mocks base method.
func (m *MockMetrics) OnResponse(arg0 string, arg1 int, arg2 time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnResponse", arg0, arg1, arg2)
}

// OnResponse indicates an expected call of OnResponse.
func (mr *MockMetricsMockRecorder) OnResponse(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnResponse", reflect.TypeOf((*MockMetrics)(nil).OnResponse), arg0, arg1, arg2)
}
